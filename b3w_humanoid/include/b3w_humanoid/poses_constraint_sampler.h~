#ifndef B3W_HUMANOID_POSES_CONSTRAINT_SAMPLER_ALLOCATOR
#define B3W_HUMANOID_POSES_CONSTRAINT_SAMPLER_ALLOCATOR

#include <moveit/constraint_samplers/constraint_sampler.h>
#include <moveit/macros/class_forward.h>
#include <random_numbers/random_numbers.h>
#include <moveit/constraint_samplers/constraint_sampler_allocator.h>
#include <moveit/constraint_samplers/constraint_sampler_manager.h>
#include <pluginlib/class_list_macros.h>

namespace b3w_humanoid{
  /**
   * \brief A structure for potentially holding a position constraint
   * and an orientation constraint for use during Ik Sampling
   *
   */
  struct IKSamplingPose
  {
    /**
     * \brief Empty constructor.
     *
     * @return
     */
    IKSamplingPose();

    /**
     * \brief Constructor that takes a single pose constraint, doing a copy
     *
     * @param pc The pose constraint that will be copied into the internal variable
     *
     */
    IKSamplingPose(const kinematic_constraints::PositionConstraint& pc);

    /**
     * \brief Constructor that takes a single orientation constraint, doing a copy
     *
     * @param oc The orientation constraint that will be copied into the internal variable
     *
     * @return
     */
    IKSamplingPose(const kinematic_constraints::OrientationConstraint& oc);

    /**
     * \brief Constructor that takes both a position and an orientation
     * constraint, copying both into the internal variables
     *
     * @param pc The pose constraint that will be copied into the internal variable
     * @param oc The orientation constraint that will be copied into the internal variable
     *
     * @return
     */
    IKSamplingPose(const kinematic_constraints::PositionConstraint& pc,
		   const kinematic_constraints::OrientationConstraint& oc);

    /**
     * \brief Constructor that takes a pointer to a position constraint.
     *
     * @param pc Pointer for copying into internal variable
     *
     * @return
     */
    IKSamplingPose(const kinematic_constraints::PositionConstraintPtr& pc);

    /**
     * \brief Constructor that takes a pointer to a orientation constraint.
     *
     * @param oc Pointer for copying into internal variable
     *
     * @return
     */
    IKSamplingPose(const kinematic_constraints::OrientationConstraintPtr& oc);

    /**
     * \brief Constructor that takes a pointer to both position and orientation constraints.
     *
     * @param pc Pointer for copying into internal variables
     * @param oc Pointer for copying into internal variable
     *
     * @return
     */
    IKSamplingPose(const kinematic_constraints::PositionConstraintPtr& pc,
		   const kinematic_constraints::OrientationConstraintPtr& oc);

    kinematic_constraints::PositionConstraintPtr position_constraint_; /**< \brief Holds the position constraint for
									  sampling */
    kinematic_constraints::OrientationConstraintPtr
    orientation_constraint_; /**< \brief Holds the orientation constraint for sampling */
  };
  
  /**
   * \brief A class that allows the sampling of IK constraints.
   *
   * An IK constraint can have a position constraint, and orientation
   * constraint, or both.  The constraint will attempt to sample a pose
   * that adheres to the constraint, and then solves IK for that pose.
   *
   */
  class PosesConstraintSampler : public constraint_samplers::ConstraintSampler
  {
  public:
    /**
     * \brief Constructor
     *
     * @param [in] scene The planning scene used to check the constraint
     *
     * @param [in] group_name The group name associated with the
     * constraint.  Will be invalid if no group name is passed in or the
     * joint model group cannot be found in the kinematic model
     *
     */
    PosesConstraintSampler(const planning_scene::PlanningSceneConstPtr& scene, const std::string& group_name)
      : ConstraintSampler(scene, group_name)
    {
    }

    /**
     * \brief Configures the IK constraint given a constraints message.
     *
     * If the constraints message contains both orientation constraints
     * and positions constraints, the function iterates through each
     * potential pair until it finds a pair of position orientation
     * constraints that lead to valid configuration of kinematic
     * constraints.  It creates an IKSamplingPose from these and calls
     * \ref configure(const IKSamplingPose &sp).  If no pair leads to
     * both having valid configuration, it will attempt to iterate
     * through the position constraints in the Constraints message,
     * calling \ref configure(const IKSamplingPose &sp) on the resulting
     * IKSamplingPose.  Finally, if no valid position constraints exist
     * it will attempt the same procedure with the orientation
     * constraints.  If no valid position or orientation constraints
     * exist, it will return false.  For more information, see the docs
     * for \ref configure(const IKSamplingPose &sp).
     *
     * @param constr The Constraint message
     *
     * @return True if some valid position and orientation constraints
     * exist and the overloaded configuration function returns true.
     * Otherwise, returns false.
     */
    virtual bool configure(const moveit_msgs::Constraints& constr) override;

    /**
     * \brief Configures the Constraint given a IKSamplingPose.
     *
     *
     * This function performs the actual constraint configuration.  It returns true if the following are true:
     * \li The \ref IKSamplingPose has either a valid orientation or position constraint
     * \li The position and orientation constraints are specified for the same link
     *
     * \li There is a valid IK solver instance for the indicated group.
     * This will be only be the case if a group has a specific solver
     * associated with it.  For situations where the super-group doesn't
     * have a solver, but all subgroups have solvers, then use the
     * \ref ConstraintSamplerManager.
     *
     * \li The kinematic model has both the links associated with the IK
     * solver's tip and base frames.
     *
     * \li The link specified in the constraints is the tip link of the IK solver
     *
     * @param [in] sp The variable that contains the position and orientation constraints
     *
     * @return True if all conditions are met and the group specified in
     * the constructor is valid.  Otherwise, false.
     */
    bool configure(const IKSamplingPose& sp);

    //使わない
    double getIKTimeout() const {
      return ik_timeout_;
    }

    //使わない
    void setIKTimeout(double timeout){
      ik_timeout_ = timeout;
    }

    //使わない
    // const kinematic_constraints::PositionConstraintPtr& getPositionConstraint() const
    // {
    //   return sampling_pose_.position_constraint_;
    // }
    //使わない
    // const kinematic_constraints::OrientationConstraintPtr& getOrientationConstraint() const
    // {
    //   return sampling_pose_.orientation_constraint_;
    // }

    /**使わない
     * \brief Gets the volume associated with the position and orientation constraints.
     *
     * This function computes the volume of the sampling constraint.
     * The volume associated with the position constraint is either the
     * product of the volume of all position constraint regions, or 1.0
     * otherwise.  The volume associated with the orientation constraint
     * is the product of all the axis tolerances, or 1.0 otherwise.  If
     * both are specified, the product of the volumes is returned.

     * @return Returns the sum of the volumes of all constraint regions
     * associated with the position and orientation constraints.
     */
    //double getSamplingVolume() const;

    //使わない
    //const std::string& getLinkName() const;

    /**
     * \brief Produces an IK sample.
     *
     * This function first calls the \ref samplePose function to produce
     * a position and orientation in the constraint region.  It then
     * calls IK on that pose.  If a pose that satisfies the constraints
     * can be determined, and IK returns a solution for that pose, then
     * the joint values associated with the joint group will be
     * populated with the results of the IK, and the function will
     * return true.  The function will attempt to sample a pose up to
     * max_attempts number of times, and then call IK on that value.  If
     * IK is not successful, it will repeat the pose sample and IK
     * procedure max_attempt times.  If in any iteration a valid pose
     * cannot be sample within max_attempts time, it will return false.
     *
     * @param jsg The joint state group in question.  Must match the group passed in the constructor or will return false.
     * @param ks A reference state that will be used for transforming the IK poses
     * @param max_attempts The number of attempts to both sample and try IK
     *
     * @return True if a valid sample pose was produced and valid IK found for that pose.  Otherwise false.
     */
    virtual bool sample(robot_state::RobotState& state, const robot_state::RobotState& reference_state,
			unsigned int max_attempts);

    virtual bool project(robot_state::RobotState& state, unsigned int max_attempts);
    /**
     * \brief Returns a pose that falls within the constraint regions.
     *
     * If a position constraint is specified, then a position is
     * produced by selecting a random region among the constraint
     * regions and taking a sample in that region.  If no region is
     * valid the function returns false.  If no position constraint is
     * specified, a position is produced by assigning a random valid
     * value to each group joint, performing forward kinematics, and
     * taking the resulting pose.  If an orientation constraint is
     * specified, then an quaternion is produced by sampling a
     * difference value within the axis tolerances and applying the
     * difference rotation to the orientation constraint target.
     * Otherwise, a random quaternion is produced.
     *
     * @param [out] pos The position component of the sample
     * @param [out] quat The orientation component of the sample
     * @param [in] ks The reference state used for performing transforms
     * @param [in] max_attempts The maximum attempts to try to sample - applies only to the position constraint
     *
     * @return True if a sample was successfully produced, otherwise false
     */
    bool samplePose(std::vector<Eigen::Vector3d>& pos, std::vector<Eigen::Quaterniond>& quat, const robot_state::RobotState& ks,
		    unsigned int max_attempts);

    /**
     * \brief Get the name of the constraint sampler, for debugging purposes
     * should be in CamelCase format.
     * \return string of name
     */
    virtual const std::string& getName() const override
    {
      static const std::string SAMPLER_NAME = "PosesConstraintSampler";
      return SAMPLER_NAME;
    }

  protected:
    virtual void clear();

    /**
     * \brief Performs checks and sets various internal values associated with the IK solver
     *
     * @return True if the IK solver exists and if it associated with the expected base frame and tip frames.  Otherwise
     *false.
     */
    bool loadIKSolver();

    /**
     * \brief Actually calls IK on the given pose, generating a random seed state.
     *
     * @param ik_query The pose for solving IK, assumed to be for the tip frame in the base frame
     * @param timeout The timeout for the IK search
     * @param jsg The joint state group into which to place the solution
     * @param use_as_seed If true, the state values in jsg are used as seed for the IK
     *
     * @return True if IK returns successfully with the timeout, and otherwise false.
     */
    bool callIK(const std::vector<geometry_msgs::Pose>& ik_query,
		const kinematics::KinematicsBase::IKCallbackFn& adapted_ik_validity_callback, double timeout,
		robot_state::RobotState& state, bool use_as_seed);
    bool sampleHelper(robot_state::RobotState& state, const robot_state::RobotState& reference_state,
		      unsigned int max_attempts, bool project);
    bool validate(robot_state::RobotState& state) const;

    random_numbers::RandomNumberGenerator random_number_generator_; /**< \brief Random generator used by the sampler */
    
    kinematics::KinematicsBaseConstPtr kb_;                         /**< \brief Holds the kinematics solver */
    double ik_timeout_;                                             /**< \brief Holds the timeout associated with IK */
    std::string ik_frame_;                                          /**< \brief Holds the base from of the IK solver */
    bool transform_ik_; /**< \brief True if the frame associated with the kinematic model is different than the base frame
			   of the IK solver */

    std::vector<IKSamplingPose> sampling_poses_;                                  /**< \brief Holder for the pose used for sampling */
    std::vector<bool> need_eef_to_ik_tip_transforms_; /**< \brief True if the tip frame of the inverse kinematic is different than the
					   frame of the end effector */
    std::vector<Eigen::Affine3d> eef_to_ik_tip_transform_; /**< \brief Holds the transformation from end effector to IK tip frame */

    std::vector<int> tip2pose_index_;//tipframesからconstraintへのmap
  };

  
// define the sampler allocator plugin interface
  class PosesConstraintSamplerAllocator :public constraint_samplers::ConstraintSamplerAllocator{
  public:
    virtual constraint_samplers::ConstraintSamplerPtr alloc(const planning_scene::PlanningSceneConstPtr &scene,
							    const std::string &group_name,
							    const moveit_msgs::Constraints &constr){
      constraint_samplers::ConstraintSamplerPtr cs(new PosesConstraintSampler(scene, group_name));
      cs->configure(constr);
      return cs;
    }

  virtual bool canService(const planning_scene::PlanningSceneConstPtr &scene,
			  const std::string &group_name,
                          const moveit_msgs::Constraints &constr) const override{
    //constrを読んで、poseconstraintまたはorientationconstraintであることを確認する
    if(constr.position_constraints.size()>0||constr.orientation_constraints.size()>0){
      return true;
    }else{
      return false;
    }
  }
    
  };
  
}//ns



PLUGINLIB_EXPORT_CLASS(b3w_humanoid::PosesConstraintSamplerAllocator,
                       constraint_samplers::ConstraintSamplerAllocator);

#endif
